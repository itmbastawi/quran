# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

def index():
     
    
   
    return locals()
def juz():
    juzall=db(db.quranj).select()
    juzr=db.quranj.readj
    chjuz=juzr=='False'
    juzrow=db(chjuz).select()
    num=db.ehsaa.id==1
    numold=db(num).select()[0] 
   
    return locals()
    
def hizb():
    hizball=db(db.quranh).select()
    hizbr=db.quranh.readh
    chhizb=hizbr=='False'
    hizbrow=db(chhizb).select()
    num=db.ehsaa.id==2
    numold=db(num).select()[0]
    return locals()

def quarter():
    quarterall=db(db.quranq).select()
    quarterr=db.quranq.readr
    chquarter=quarterr=='False'
    quarterrow=db(chquarter).select()
 
    return locals()
    
def juzfv():
    juzsee=db.quranj(request.args(0))or redirect(URL('index'))
    juzform=SQLFORM(db.quranj,request.args(0),fields=['readj'],showid=False,buttons = ['submit'],labels ={'readj':'اضغط هنا'},formstyle = 'divs').process()

    return locals()    
def hizbfv():
    juzsee=db.quranh(request.args(0))or redirect(URL('index'))
    juzform=SQLFORM(db.quranh,request.args(0),fields=['readh'],showid=False,labels ={'readh':'اضغط هنا'},formstyle = 'divs').process()

    return locals()    
def about():
    return locals()    
    
    
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
